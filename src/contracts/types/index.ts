// This file will be auto-generated by Hardhat when contracts are compiled
// For now, we'll create placeholder types

export interface PoolFactory {
  createPool(
    name: string,
    minParticipation: string,
    winProbability: number,
    platformFeePercent: number,
    durationInDays: number,
    overrides?: { value: string }
  ): Promise<any>;
  
  getPoolCount(): Promise<any>;
  getPoolByIndex(index: number): Promise<string>;
  checkIsPool(address: string): Promise<boolean>;
  getAllPools(): Promise<any[]>;
  withdrawFees(): Promise<any>;
}

export interface PrizePool {
  joinPool(overrides?: { value: string }): Promise<any>;
  endPool(): Promise<any>;
  withdrawPlatformFees(): Promise<any>;
  emergencyWithdraw(): Promise<any>;
  getPoolStats(): Promise<any>;
  getParticipant(user: string): Promise<any>;
  getAllParticipants(): Promise<string[]>;
  config(): Promise<any>;
}

export class PoolFactory__factory {
  static abi: any[];
  static connect(address: string, signerOrProvider: any): PoolFactory;
}

export class PrizePool__factory {
  static abi: any[];
  static connect(address: string, signerOrProvider: any): PrizePool;
}
